name: Release Helm Chart

on:
  push:
    branches: [ main ]
    paths:
      - 'aws-integration-setup/charts/**'
      - '.github/workflows/helm-release.yml'
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.14.0

    - name: Determine version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Use tag version (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using tag version: $VERSION"
        else
          # Auto-increment patch version for main branch commits
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          
          # Parse semantic version
          IFS='.' read -ra VERSION_PARTS <<< "$LATEST_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Auto-incremented version: $LATEST_VERSION -> $NEW_VERSION"
        fi

    - name: Update Chart version
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update Chart.yaml with new version
        sed -i "s/^version:.*/version: $VERSION/" aws-integration-setup/charts/nullify-k8s-collector/Chart.yaml
        
        # Optionally update appVersion to match
        sed -i "s/^appVersion:.*/appVersion: \"$VERSION\"/" aws-integration-setup/charts/nullify-k8s-collector/Chart.yaml
        
        echo "Updated Chart.yaml to version $VERSION"
        cat aws-integration-setup/charts/nullify-k8s-collector/Chart.yaml | grep -E "^(version|appVersion):"

    - name: Add Helm repos (if chart has dependencies)
      run: |
        helm repo add bitnami https://charts.bitnami.com/bitnami || true
        helm repo update || true

    - name: Package Helm Chart
      run: |
        # Create docs directory if it doesn't exist
        mkdir -p docs
        
        # Package the chart
        helm package aws-integration-setup/charts/nullify-k8s-collector -d docs/
        
        # Generate/update the index
        helm repo index docs/ --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.14.0

    - name: Validate Helm Chart
      run: |
        helm lint aws-integration-setup/charts/nullify-k8s-collector
        helm template aws-integration-setup/charts/nullify-k8s-collector --debug

    - name: Check for sensitive data
      run: |
        echo "üîç Checking for sensitive data in chart..."
        
        # Check for real account IDs, ARNs, bucket names
        if grep -r "arn:aws:iam::[0-9]\{12\}:role/" aws-integration-setup/charts/ --exclude-dir=.git; then
          echo "‚ùå Found real AWS ARN in chart files"
          exit 1
        fi
        
        if grep -r "nullify-.*-death-star" aws-integration-setup/charts/ --exclude-dir=.git; then
          echo "‚ùå Found real Nullify bucket names in chart files"
          exit 1
        fi
        
        if grep -r "[0-9]\{12\}" aws-integration-setup/charts/ --exclude-dir=.git | grep -v "123456789012"; then
          echo "‚ùå Found potential real AWS account ID in chart files"
          exit 1
        fi
        
        echo "‚úÖ No sensitive data found in chart files" 